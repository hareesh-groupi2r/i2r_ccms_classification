version: '3.8'

services:
  # Main API service
  ccms-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - WORKERS=4
      - PORT=8000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Background worker (optional)
  ccms-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "background_tasks", "worker", "--loglevel=info", "--concurrency=2"]
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2

  # Monitoring (optional)
  ccms-flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "background_tasks", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    restart: unless-stopped

  # Load balancer (for high availability)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - ccms-api
    restart: unless-stopped

volumes:
  redis_data:

networks:
  default:
    name: ccms-network